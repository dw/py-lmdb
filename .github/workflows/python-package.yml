---
name: Build, run, and test py-lmdb

'on':
  push:
    branches: [master make-package]
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: [2.7, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, pypy-2.7, pypy-3.6]
        # impl: [cpython, cffi]
        # purity: [pure, with-pylmdb-mods]

        # Nic tmp
        os: [ubuntu-latest, windows-latest]
        python-version: [3.9]
        impl: [cpython]
        purity: [with-pylmdb-mods]

        exclude:
          - python-version: pypy-2.7
            impl: cpython
          - python-version: pypy-3.6
            impl: cpython

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set env vars Windows
        if: runner.os == 'Windows'
        run: >-
          if ( '${{ matrix.impl }}' -eq 'cpython' ) {
            echo "LMDB_FORCE_CPYTHON=1" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "LMDB_FORCE_CFFI=1" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          if ( '${{ matrix.purity }}' -eq 'pure' ) {
            echo "LMDB_PURE=1" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
      - name: Set env vars *nix
        if: runner.os != 'Windows'
        run: |
          if [[ ${{ matrix.impl }} == cpython ]] ; then
            echo "LMDB_FORCE_CPYTHON=1" >> $GITHUB_ENV;
          else
            echo "LMDB_FORCE_CFFI=1" >> $GITHUB_ENV;
          fi
          if [[ ${{ matrix.purity }} == pure ]] ; then
            echo "LMDB_PURE=1" >> $GITHUB_ENV;
          fi

      - name: Install Visual C++ for Python 2.7
        if: runner.os == 'Windows' && matrix.python-version == '2.7'
        run: |
          choco install vcpython27 -f -y

      - name: Install dependencies
        run: |
          echo "Linux: Envs are cpython=$LMDB_FORCE_CPYTHON
            cffi=$LMDB_FORCE_CFFI pure=$LMDB_PURE"
          echo "Windows: Envs are cpython=$Env:LMDB_FORCE_CPYTHON
            cffi=$Env:LMDB_FORCE_CFFI pure=$Env:LMDB_PURE"
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install flake8 pytest patch-ng
          python setup.py develop sdist bdist_wheel
          ls dist
      # name: Lint with flake8
      # run: |
      #   # stop the build if there are Python syntax errors or undefined names
      #   flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #   # exit-zero treats all errors as warnings.
      #   flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      - name: Test with pytest
        # Limit the test cycle a little
        if: matrix.python-version != '3.4' && matrix.python-version != '3.6' &&
            matrix.python-version != '3.8'
        run: |
          echo "Envs are cpython=$LMDB_FORCE_CPYTHON cffi=$LMDB_FORCE_CFFI
            pure=$LMDB_PURE"
          # Nic tmp
          # pytest
      - name: Save wheel
        uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}-\
            ${{ matrix.impl }}-${{ matrix.purity }}.whl"
          path: dist/lmdb-*.whl
      - name: Save source
        # We only need a single target to upload the source
        # (all targets have the same source)
        if: >-
          matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' &&
          matrix.purity == 'with-pylmdb-mods' && matrix.impl == 'cpython'

        uses: actions/upload-artifact@v2
        with:
          path: dist/lmdb*.tar.gz
      - name: Build manylinux wheel
        if: >-
          matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' &&
          matrix.purity == 'with-pylmdb-mods' && matrix.impl == 'cpython'
        uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2010_x86_64
        with:
          python-versions: >-
              cp27-cp27m cp35-cp35m cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39
          build-requirements: 'patch-ng'

      - name: What do we have
        run: ls dist

      - name: Save manylinux wheel
        # We only need a single target to upload the source
        # (all targets have the same source)
        if: >-
          matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' &&
          matrix.purity == 'with-pylmdb-mods' && matrix.impl == 'cpython'
        uses: actions/upload-artifact@v2
        with:
          path: dist/lmdb*manylinux*.whl
          name: manylinux.zip

  publish:
    needs: build
    # N.B. the host running twine to upload is distinct from the target image
    runs-on: ubuntu-latest
    strategy:
      # We publish a subset of the targets we test
      matrix:
        # os: [macos-latest, windows-latest]
        # python-version: ['2.7', '3.4', '3.5', '3.6', '3.7', '3.8', '3.9', pypy-2.7, pypy-3.6]
        # impl: [cpython, cffi]
        # purity: [with-pylmdb-mods]

        # Nic tmp
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9']
        impl: [cpython]
        purity: [with-pylmdb-mods]

        exclude:
          - python-version: pp27
            impl: cpython
          - python-version: pp36
            impl: cpython
          - python-version: cp27-27m
            impl: cffi
          - python-version: cp34-34m
            impl: cffi
          - python-version: cp35-35m
            impl: cffi
          - python-version: cp36-36m
            impl: cffi
          - python-version: cp37-37m
            impl: cffi
          - python-version: cp38-38
            impl: cffi
          - python-version: cp39-39
            impl: cffi

    env:
      VER2WHL: >-
        {
          "pypy-2.7": "pp27",
          "pypy-3.6": "pp36",
          "2.7": "cp27-27m",
          "3.4": "cp34-34m",
          "3.5": "cp35-35m",
          "3.6": "cp36-36m",
          "3.7": "cp37-37m",
          "3.8": "cp38-38",
          "3.9": "cp39-39"
        }

    steps:
      - name: Download manylinux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v2

      - name: See what we have
        run: ls

      - name: Unzip manylinux artifacts
        if: matrix.os == 'ubuntu-latest'
        run: >-
          mkdir -p dist; cd dist; unzip ../manylinux.zip; ls

      - name: Download non-Ubuntu wheel
        if: matrix.os != 'ubuntu-latest'
        uses: actions/download-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}-\
            ${{ matrix.impl }}-${{ matrix.purity }}.whl"
          path:


      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
